package server

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"
	"pull-request-notificator/notifier"
	"pull-request-notificator/server/entities"
)

func Run(notifier *notifier.Notifier) error {
	http.HandleFunc("/opened", func(w http.ResponseWriter, r *http.Request) {
		var payload entities.PullRequest
		if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º pull request: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: %s\n", err)
			http.Error(w, "Invalid request parameters", http.StatusBadRequest)
			return
		}

		go func() {
			message := fmt.Sprintf("*üöÄ –ù–æ–≤—ã–π PR –æ—Ç* %s\n\n%s", payload.Author.Link(), payload.TextWithLink())

			if err := notifier.Send(context.Background(), message); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º pull request: %s", err)
			}
		}()

		w.WriteHeader(http.StatusOK)
	})

	http.HandleFunc("POST /request-review", func(w http.ResponseWriter, r *http.Request) {
		var payload entities.RequestReviewer
		if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ review: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: %s\n", err)
			http.Error(w, "Invalid request parameters", http.StatusBadRequest)
			return
		}

		go func() {
			message := fmt.Sprintf("*üëÄ @%s, —Ç–µ–±—è –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç –Ω–∞ —Ä–µ–≤—å—é*\n\n%s (by %s)", payload.Reviewer.Tag(), payload.PullRequest.TextWithLink(), payload.PullRequest.Author.Link())

			if err := notifier.Send(context.Background(), message); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ review: %s", err)
			}
		}()

		w.WriteHeader(http.StatusOK)
	})

	http.HandleFunc("POST /approve", func(w http.ResponseWriter, r *http.Request) {
		var payload entities.Review
		if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–µ–≤—å—é (approve): –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: %s\n", err)
			http.Error(w, "Invalid request parameters", http.StatusBadRequest)
			return
		}

		go func() {
			message := fmt.Sprintf("‚úÖ *@%s, —Ç–≤–æ–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–¥–æ–±—Ä–∏–ª(–∞)* %s\n\n%s", payload.PullRequest.Author.Tag(), payload.Reviewer.Link(), payload.PullRequest.TextWithLink())

			if err := notifier.Send(context.Background(), message); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–µ–≤—å—é (approve): %v", err)
			}
		}()

		w.WriteHeader(http.StatusOK)
	})

	http.HandleFunc("POST /request-changes", func(w http.ResponseWriter, r *http.Request) {
		var payload entities.Review
		if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–µ–≤—å—é (request-changes): –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: %s\n", err)
			http.Error(w, "Invalid request parameters", http.StatusBadRequest)
			return
		}

		go func() {
			message := fmt.Sprintf("‚ùå *@%s, —Ç–µ–±—è –ø—Ä–æ—Å–∏—Ç –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è* %s\n\n%s", payload.PullRequest.Author.Tag(), payload.Reviewer.Link(), payload.PullRequest.TextWithLink())

			if err := notifier.Send(context.Background(), message); err != nil {
				http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–µ–≤—å—é (request-changes): %v", err), http.StatusInternalServerError)
			}
		}()

		w.WriteHeader(http.StatusOK)
	})

	http.HandleFunc("POST /comment", func(w http.ResponseWriter, r *http.Request) {
		var payload entities.Review
		if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–µ–≤—å—é (comment): –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: %s\n", err)
			http.Error(w, "Invalid request parameters", http.StatusBadRequest)
			return
		}

		if payload.PullRequest.Author != payload.Reviewer {
			go func() {
				message := fmt.Sprintf("*‚úçÔ∏è @%s, —Ç–µ–±–µ –æ—Å—Ç–∞–≤–∏–ª(–∞) –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π* %s\n\n%s", payload.PullRequest.Author.Tag(), payload.Reviewer.Link(), payload.PullRequest.TextWithLink())

				if err := notifier.Send(context.Background(), message); err != nil {
					http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ —Ä–µ–≤—å—é (comment): %v", err), http.StatusInternalServerError)
				}
			}()
		}

		w.WriteHeader(http.StatusOK)
	})

	http.HandleFunc("POST /rspec-fail", func(w http.ResponseWriter, r *http.Request) {
		var payload entities.PullRequest
		if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: %s\n", err)
			http.Error(w, "Invalid request parameters", http.StatusBadRequest)
			return
		}

		go func() {
			message := fmt.Sprintf("*ü§í @%s, –≤–æ–∑–Ω–∏–∫–ª–∏ –æ—à–∏–±–∫–∏ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≥–æ–Ω–∞ —Ç–µ—Å—Ç–æ–≤ –Ω–∞ CI*\n\n%s", payload.Author.Tag(), payload.TextWithLink())

			if err := notifier.Send(context.Background(), message); err != nil {
				http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö: %v", err), http.StatusInternalServerError)
			}
		}()

		w.WriteHeader(http.StatusOK)
	})

	http.HandleFunc("POST /rubocop-fail", func(w http.ResponseWriter, r *http.Request) {
		var payload entities.PullRequest
		if err := json.NewDecoder(r.Body).Decode(&payload); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–∞—Ö: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞: %s\n", err)
			http.Error(w, "Invalid request parameters", http.StatusBadRequest)
			return
		}

		go func() {
			message := fmt.Sprintf("*ü§ñ @%s, rubocop –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ç–≤–æ–µ–º –∫–æ–¥–µ*\n\n%s", payload.Author.Tag(), payload.TextWithLink())

			if err := notifier.Send(context.Background(), message); err != nil {
				http.Error(w, fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–±–∫–∞—Ö –ª–∏–Ω—Ç–µ—Ä–∞: %v", err), http.StatusInternalServerError)
			}
		}()

		w.WriteHeader(http.StatusOK)
	})

	log.Println("–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ :8080")
	return http.ListenAndServe("0.0.0.0:8080", nil)
}
